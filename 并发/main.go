package main

/*
	并行: 同一时刻多个任务被执行
	并发: 同一时间段多个任务被执行

	进程: 一个具有一定独立功能的程序在一个数据集上的一次动态执行过程
		 是操作系统进行资源分配和调度的一个独立单位
	进程缺点: 开销大：进程的创建和销毁需要较多的系统资源和时间，尤其是分配和回收内存。

	         通信复杂：进程间通信（IPC）相对复杂，通常需要使用管道、消息队列、共享内存等机制，增加了编程的复杂性。

             上下文切换开销：在多个进程之间进行上下文切换时，操作系统需要保存和恢复进程的状态，这会带来性能开销。

             资源分配不灵活：进程通常拥有固定的资源分配，可能导致资源利用率不高。

             隔离性：虽然进程间的隔离提高了安全性，但也使得某些共享资源的使用变得不方便，增加了编程难度。
	线程(微进程): 线程是程序执行的最小单位，是进程内部的一个执行流。一个进程可以包含多个线程，它们共享进程的资源


	进程与线程关系: 基本单位：进程是资源分配的基本单位，而线程是 CPU 调度的基本单位。一个进程可以包含多个线程。

				 资源管理：每个进程拥有独立的地址空间和资源（如内存、文件句柄），而线程则共享同一进程的资源。

				 执行：线程在进程内部执行，多个线程可以并发运行，提高了程序的执行效率。

				 通信：进程间通信（IPC）相对复杂，而线程间通信更容易，因为它们共享内存。

				 创建和销毁：创建和销毁线程的开销通常小于进程，因为线程的上下文切换比进程的上下文切换更轻量。


	协程(微线程, 用户级线程): 允许在单个线程中进行多任务处理, 并不是由操作系统完成而是由用户或者应用层(go的编译器)来完成
	go完全发挥了多核的优势, 在线程之上开辟协程做到并发加并行, 例如有三个cpu, 有十个协程任务, go编译器会开辟例如三个线程来调度cpu这些协程任务会分布在这三个线程之上发挥多核优势
*/

func main() {
}
