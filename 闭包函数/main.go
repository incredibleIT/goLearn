package main

import "fmt"

/*
	闭包(closure) : 又称词法闭包, 函数闭包, 是引用了自由变量的函数,
					这个被引用的自由变量将和这个函数一同存在, 即使已经
					离开了创造他的环境也不例外, 所以, 有另一种说法认为
					闭包是由函数和与其相关的引用环境组合而成的实体
					闭包在运行时可以有多个实例, 不同的引用环境和相同的函数组合可以产生不同的实例
*/

/*
	简单来说闭包就是一个函数定义中引用了函数外定义的变量, 并且该函数可以在其定义的环境外执行, 这样的一个函数我们称之为闭包

	闭包需要满足三个条件: (缺一不可)
		1. 必须是一个嵌套函数
		2. 必须返回嵌套函数
		3. 嵌套函数必须引用外部非全局的局部自由变量
*/

/*
	一个函数在调用时会将其所用到的所有变量压栈,
	当函数调用结束会将栈中的变量释放, 若在闭包函数中对一个外部非全局的自由变量进行引用
	这个变量则不会释放
*/
func f() func() {

	// 外部非全局变量
	x := 100

	// 一个嵌套函数, a是一个闭包函数
	a := func() {
		fmt.Println("hello world")

		// 形成闭包, 对外部非全局变量引用
		fmt.Println(x)
	}

	// 返回嵌套函数
	return a
}

func main() {

	f := f()

	f() // f闭包函数

}
